// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package repl_test is a generated GoMock package.
package repl_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kamilsk/grafaman/internal/model"
)

// MockCoverageReporter is a mock of CoverageReporter interface
type MockCoverageReporter struct {
	ctrl     *gomock.Controller
	recorder *MockCoverageReporterMockRecorder
}

// MockCoverageReporterMockRecorder is the mock recorder for MockCoverageReporter
type MockCoverageReporterMockRecorder struct {
	mock *MockCoverageReporter
}

// NewMockCoverageReporter creates a new mock instance
func NewMockCoverageReporter(ctrl *gomock.Controller) *MockCoverageReporter {
	mock := &MockCoverageReporter{ctrl: ctrl}
	mock.recorder = &MockCoverageReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoverageReporter) EXPECT() *MockCoverageReporterMockRecorder {
	return m.recorder
}

// CoverageReport mocks base method
func (m *MockCoverageReporter) CoverageReport(arg0 model.Metrics) model.CoverageReport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoverageReport", arg0)
	ret0, _ := ret[0].(model.CoverageReport)
	return ret0
}

// CoverageReport indicates an expected call of CoverageReport
func (mr *MockCoverageReporterMockRecorder) CoverageReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverageReport", reflect.TypeOf((*MockCoverageReporter)(nil).CoverageReport), arg0)
}

// MockCoverageReportPrinter is a mock of CoverageReportPrinter interface
type MockCoverageReportPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockCoverageReportPrinterMockRecorder
}

// MockCoverageReportPrinterMockRecorder is the mock recorder for MockCoverageReportPrinter
type MockCoverageReportPrinterMockRecorder struct {
	mock *MockCoverageReportPrinter
}

// NewMockCoverageReportPrinter creates a new mock instance
func NewMockCoverageReportPrinter(ctrl *gomock.Controller) *MockCoverageReportPrinter {
	mock := &MockCoverageReportPrinter{ctrl: ctrl}
	mock.recorder = &MockCoverageReportPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoverageReportPrinter) EXPECT() *MockCoverageReportPrinterMockRecorder {
	return m.recorder
}

// PrintCoverageReport mocks base method
func (m *MockCoverageReportPrinter) PrintCoverageReport(arg0 model.CoverageReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintCoverageReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintCoverageReport indicates an expected call of PrintCoverageReport
func (mr *MockCoverageReportPrinterMockRecorder) PrintCoverageReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintCoverageReport", reflect.TypeOf((*MockCoverageReportPrinter)(nil).PrintCoverageReport), arg0)
}

// MockMetricPrinter is a mock of MetricPrinter interface
type MockMetricPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricPrinterMockRecorder
}

// MockMetricPrinterMockRecorder is the mock recorder for MockMetricPrinter
type MockMetricPrinterMockRecorder struct {
	mock *MockMetricPrinter
}

// NewMockMetricPrinter creates a new mock instance
func NewMockMetricPrinter(ctrl *gomock.Controller) *MockMetricPrinter {
	mock := &MockMetricPrinter{ctrl: ctrl}
	mock.recorder = &MockMetricPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricPrinter) EXPECT() *MockMetricPrinterMockRecorder {
	return m.recorder
}

// PrintMetrics mocks base method
func (m *MockMetricPrinter) PrintMetrics(arg0 model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintMetrics indicates an expected call of PrintMetrics
func (mr *MockMetricPrinterMockRecorder) PrintMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMetrics", reflect.TypeOf((*MockMetricPrinter)(nil).PrintMetrics), arg0)
}
