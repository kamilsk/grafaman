// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package cmd_test is a generated GoMock package.
package cmd_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kamilsk/grafaman/internal/model"
)

// MockCoverageReportPrinter is a mock of CoverageReportPrinter interface
type MockCoverageReportPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockCoverageReportPrinterMockRecorder
}

// MockCoverageReportPrinterMockRecorder is the mock recorder for MockCoverageReportPrinter
type MockCoverageReportPrinterMockRecorder struct {
	mock *MockCoverageReportPrinter
}

// NewMockCoverageReportPrinter creates a new mock instance
func NewMockCoverageReportPrinter(ctrl *gomock.Controller) *MockCoverageReportPrinter {
	mock := &MockCoverageReportPrinter{ctrl: ctrl}
	mock.recorder = &MockCoverageReportPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoverageReportPrinter) EXPECT() *MockCoverageReportPrinterMockRecorder {
	return m.recorder
}

// SetPrefix mocks base method
func (m *MockCoverageReportPrinter) SetPrefix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrefix", arg0)
}

// SetPrefix indicates an expected call of SetPrefix
func (mr *MockCoverageReportPrinterMockRecorder) SetPrefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefix", reflect.TypeOf((*MockCoverageReportPrinter)(nil).SetPrefix), arg0)
}

// PrintCoverageReport mocks base method
func (m *MockCoverageReportPrinter) PrintCoverageReport(arg0 model.CoverageReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintCoverageReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintCoverageReport indicates an expected call of PrintCoverageReport
func (mr *MockCoverageReportPrinterMockRecorder) PrintCoverageReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintCoverageReport", reflect.TypeOf((*MockCoverageReportPrinter)(nil).PrintCoverageReport), arg0)
}

// MockMetricPrinter is a mock of MetricPrinter interface
type MockMetricPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricPrinterMockRecorder
}

// MockMetricPrinterMockRecorder is the mock recorder for MockMetricPrinter
type MockMetricPrinterMockRecorder struct {
	mock *MockMetricPrinter
}

// NewMockMetricPrinter creates a new mock instance
func NewMockMetricPrinter(ctrl *gomock.Controller) *MockMetricPrinter {
	mock := &MockMetricPrinter{ctrl: ctrl}
	mock.recorder = &MockMetricPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricPrinter) EXPECT() *MockMetricPrinterMockRecorder {
	return m.recorder
}

// SetPrefix mocks base method
func (m *MockMetricPrinter) SetPrefix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrefix", arg0)
}

// SetPrefix indicates an expected call of SetPrefix
func (mr *MockMetricPrinterMockRecorder) SetPrefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefix", reflect.TypeOf((*MockMetricPrinter)(nil).SetPrefix), arg0)
}

// PrintMetrics mocks base method
func (m *MockMetricPrinter) PrintMetrics(arg0 model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintMetrics indicates an expected call of PrintMetrics
func (mr *MockMetricPrinterMockRecorder) PrintMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMetrics", reflect.TypeOf((*MockMetricPrinter)(nil).PrintMetrics), arg0)
}

// MockQueryPrinter is a mock of QueryPrinter interface
type MockQueryPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockQueryPrinterMockRecorder
}

// MockQueryPrinterMockRecorder is the mock recorder for MockQueryPrinter
type MockQueryPrinterMockRecorder struct {
	mock *MockQueryPrinter
}

// NewMockQueryPrinter creates a new mock instance
func NewMockQueryPrinter(ctrl *gomock.Controller) *MockQueryPrinter {
	mock := &MockQueryPrinter{ctrl: ctrl}
	mock.recorder = &MockQueryPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryPrinter) EXPECT() *MockQueryPrinterMockRecorder {
	return m.recorder
}

// PrintQueries mocks base method
func (m *MockQueryPrinter) PrintQueries(arg0 model.Queries) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintQueries", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintQueries indicates an expected call of PrintQueries
func (mr *MockQueryPrinterMockRecorder) PrintQueries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintQueries", reflect.TypeOf((*MockQueryPrinter)(nil).PrintQueries), arg0)
}
