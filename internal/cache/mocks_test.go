// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/grafaman/internal/provider (interfaces: Graphite)

// Package cache_test is a generated GoMock package.
package cache_test

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kamilsk/grafaman/internal/model"
)

// MockGraphite is a mock of Graphite interface
type MockGraphite struct {
	ctrl     *gomock.Controller
	recorder *MockGraphiteMockRecorder
}

// MockGraphiteMockRecorder is the mock recorder for MockGraphite
type MockGraphiteMockRecorder struct {
	mock *MockGraphite
}

// NewMockGraphite creates a new mock instance
func NewMockGraphite(ctrl *gomock.Controller) *MockGraphite {
	mock := &MockGraphite{ctrl: ctrl}
	mock.recorder = &MockGraphiteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGraphite) EXPECT() *MockGraphiteMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockGraphite) Fetch(arg0 context.Context, arg1 string, arg2 time.Duration) (model.MetricNames, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.MetricNames)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockGraphiteMockRecorder) Fetch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockGraphite)(nil).Fetch), arg0, arg1, arg2)
}
